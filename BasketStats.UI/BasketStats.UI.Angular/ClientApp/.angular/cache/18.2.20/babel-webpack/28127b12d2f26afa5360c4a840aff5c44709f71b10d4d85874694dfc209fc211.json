{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/michi_9o40b52/source/repos/BasketStats/BasketStats.UI/BasketStats.UI.Angular/ClientApp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport jsPDF from 'jspdf';\nimport autoTable from 'jspdf-autotable';\nimport * as i0 from \"@angular/core\";\nexport let PdfService = /*#__PURE__*/(() => {\n  class PdfService {\n    generatePlayerStatsReport(players, competitionName) {\n      var _this = this;\n      return _asyncToGenerator(function* () {\n        const doc = new jsPDF({\n          orientation: 'landscape',\n          unit: 'pt',\n          format: 'a4'\n        });\n        const width = doc.internal.pageSize.getWidth();\n        const height = doc.internal.pageSize.getHeight();\n        // Header banner\n        doc.setFillColor(29, 66, 138); // nba blue\n        doc.rect(0, 0, width, 60, 'F');\n        doc.setFillColor(201, 8, 42); // nba red\n        doc.rect(0, 55, width, 5, 'F');\n        // Title\n        doc.setTextColor(255, 255, 255);\n        doc.setFontSize(18);\n        doc.text('BasketStats - Player Statistics Report', 80, 38);\n        doc.setFontSize(12);\n        doc.text(`Competition: ${competitionName}`, 80, 58);\n        // Prepare table data\n        const head = [['Player', 'GP', 'PPG', 'RPG', 'APG', 'FG%', '3P%', 'FT%', 'SPG', 'BPG', 'TOV', 'MPG', 'EFF', 'Total PTS', 'Total REB', 'Total AST', 'Total STL', 'Total BLK']];\n        const body = players.map(p => [p.playerName, p.gamesPlayed, p.pointsPerGame.toFixed(1), p.reboundsPerGame.toFixed(1), p.assistsPerGame.toFixed(1), p.fieldGoalPercentage.toFixed(1), p.threePointPercentage.toFixed(1), p.freeThrowPercentage.toFixed(1), p.stealsPerGame.toFixed(1), p.blocksPerGame.toFixed(1), p.turnoversPerGame.toFixed(1), p.minutesPerGame.toFixed(1), p.efficiency.toFixed(1), p.totalPoints, p.totalRebounds, p.totalAssists, p.totalSteals, p.totalBlocks]);\n        autoTable(doc, {\n          head,\n          body,\n          startY: 80,\n          styles: {\n            fontSize: 9,\n            cellPadding: 4\n          },\n          headStyles: {\n            fillColor: [29, 66, 138],\n            textColor: [255, 255, 255]\n          },\n          alternateRowStyles: {\n            fillColor: [245, 245, 245]\n          }\n        });\n        // Add logo bottom-right (load image and then save)\n        try {\n          const imgData = yield _this.loadImageAsDataUrl('/images/basketballstats.png');\n          const imgW = 80,\n            imgH = 80;\n          doc.addImage(imgData, 'PNG', width - imgW - 24, height - imgH - 24, imgW, imgH);\n        } catch {\n          // ignore if image load fails\n        }\n        doc.save(`PlayerStats_${competitionName.replace(/[^a-z0-9]/gi, '_')}.pdf`);\n      })();\n    }\n    generatePlayerStatsReportAdvanced(players, competitionName) {\n      var _this2 = this;\n      return _asyncToGenerator(function* () {\n        const doc = new jsPDF({\n          orientation: 'landscape',\n          unit: 'pt',\n          format: 'a4'\n        });\n        const width = doc.internal.pageSize.getWidth();\n        const height = doc.internal.pageSize.getHeight();\n        // Header banner\n        doc.setFillColor(29, 66, 138);\n        doc.rect(0, 0, width, 60, 'F');\n        doc.setFillColor(201, 8, 42);\n        doc.rect(0, 55, width, 5, 'F');\n        // Title\n        doc.setTextColor(255, 255, 255);\n        doc.setFontSize(18);\n        doc.text('BasketStats - Advanced Player Statistics Report', 80, 38);\n        doc.setFontSize(12);\n        doc.text(`Competition: ${competitionName}`, 80, 58);\n        // thresholds for top-3 highlighting (PPG, RPG, APG, SPG, TOV)\n        const topThreshold = values => {\n          const uniq = Array.from(new Set(values.map(v => Number(v.toFixed(1))))).sort((a, b) => b - a);\n          return uniq.length >= 3 ? uniq[2] : uniq[uniq.length - 1] ?? 0;\n        };\n        const ppgT = topThreshold(players.map(p => p.pointsPerGame));\n        const rpgT = topThreshold(players.map(p => p.reboundsPerGame));\n        const apgT = topThreshold(players.map(p => p.assistsPerGame));\n        const spgT = topThreshold(players.map(p => p.stealsPerGame));\n        const tovT = topThreshold(players.map(p => p.turnoversPerGame));\n        // Column order with abbreviations\n        // Player, GP, MPG, PPG, RPG, APG, SPG, BPG, TOV, FG%, FGM/G, FGA/G, 2P%, 2PM/G, 2PA/G, 3P%, 3PM/G, 3PA/G, FT%, FTM/G, FTA/G, EFF\n        const head = [['Player', 'GP', 'MPG', 'PPG', 'RPG', 'APG', 'SPG', 'BPG', 'TOV', 'FG%', 'FGM/G', 'FGA/G', '2P%', '2PM/G', '2PA/G', '3P%', '3PM/G', '3PA/G', 'FT%', 'FTM/G', 'FTA/G', 'EFF']];\n        const idx = {\n          MPG: 2,\n          PPG: 3,\n          RPG: 4,\n          APG: 5,\n          SPG: 6,\n          BPG: 7,\n          TOV: 8\n        };\n        const body = players.map(p => {\n          const g = Math.max(1, p.gamesPlayed);\n          const fgmG = p.totalFieldGoalsMade / g;\n          const fgaG = p.totalFieldGoalsAttempted / g;\n          const twomG = p.totalTwoPointersMade / g;\n          const twoaG = p.totalTwoPointersAttempted / g;\n          const threemG = p.totalThreePointersMade / g;\n          const threeaG = p.totalThreePointersAttempted / g;\n          const ftmG = p.totalFreeThrowsMade / g;\n          const ftaG = p.totalFreeThrowsAttempted / g;\n          return [p.playerName, p.gamesPlayed, p.minutesPerGame.toFixed(1), p.pointsPerGame.toFixed(1), p.reboundsPerGame.toFixed(1), p.assistsPerGame.toFixed(1), p.stealsPerGame.toFixed(1), p.blocksPerGame.toFixed(1), p.turnoversPerGame.toFixed(1), p.fieldGoalPercentage.toFixed(1), fgmG.toFixed(1), fgaG.toFixed(1), p.twoPointPercentage.toFixed(1), twomG.toFixed(1), twoaG.toFixed(1), p.threePointPercentage.toFixed(1), threemG.toFixed(1), threeaG.toFixed(1), p.freeThrowPercentage.toFixed(1), ftmG.toFixed(1), ftaG.toFixed(1), p.efficiency.toFixed(1)];\n        });\n        autoTable(doc, {\n          head,\n          body,\n          startY: 80,\n          styles: {\n            fontSize: 9,\n            cellPadding: 4\n          },\n          headStyles: {\n            fillColor: [29, 66, 138],\n            textColor: [255, 255, 255]\n          },\n          alternateRowStyles: {\n            fillColor: [245, 245, 245]\n          },\n          didParseCell: data => {\n            if (data.section === 'body') {\n              const rowIdx = data.row.index;\n              const player = players[rowIdx];\n              if (data.column.index === idx.PPG && player.pointsPerGame >= ppgT) data.cell.styles.fontStyle = 'bold';\n              if (data.column.index === idx.RPG && player.reboundsPerGame >= rpgT) data.cell.styles.fontStyle = 'bold';\n              if (data.column.index === idx.APG && player.assistsPerGame >= apgT) data.cell.styles.fontStyle = 'bold';\n              if (data.column.index === idx.SPG && player.stealsPerGame >= spgT) data.cell.styles.fontStyle = 'bold';\n              if (data.column.index === idx.TOV && player.turnoversPerGame >= tovT) data.cell.styles.fontStyle = 'bold';\n            }\n          }\n        });\n        try {\n          const imgData = yield _this2.loadImageAsDataUrl('/images/basketballstats.png');\n          const imgW = 80,\n            imgH = 80;\n          doc.addImage(imgData, 'PNG', width - imgW - 24, height - imgH - 24, imgW, imgH);\n        } catch {}\n        doc.save(`PlayerStats_Advanced_${competitionName.replace(/[^a-z0-9]/gi, '_')}.pdf`);\n      })();\n    }\n    loadImageAsDataUrl(src) {\n      return new Promise((resolve, reject) => {\n        const img = new Image();\n        img.crossOrigin = 'anonymous';\n        img.onload = () => {\n          const canvas = document.createElement('canvas');\n          canvas.width = img.width;\n          canvas.height = img.height;\n          const ctx = canvas.getContext('2d');\n          if (!ctx) {\n            reject('no ctx');\n            return;\n          }\n          ctx.drawImage(img, 0, 0);\n          resolve(canvas.toDataURL('image/png'));\n        };\n        img.onerror = reject;\n        img.src = src;\n      });\n    }\n    static {\n      this.ɵfac = function PdfService_Factory(__ngFactoryType__) {\n        return new (__ngFactoryType__ || PdfService)();\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: PdfService,\n        factory: PdfService.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return PdfService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}